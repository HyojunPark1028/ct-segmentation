# configs/medsam_gan.yaml

model:
  name: MedSAM_GAN
  sam_checkpoint: weights/medsam_vit_b.pth # 실제 SAM 체크포인트 경로
  unet_checkpoint: weights/unet_best_model.pth # 실제 U-Net 체크포인트 경로
  out_channels: 1

data:
  # Colab 환경에서는 "C:/Users/Hyojun Park/Paper/ct-segmentation/content/data" 대신
  # Google Drive 마운트 경로(예: "/content/drive/MyDrive/Paper/ct_segmentation/output_dataset")를 사용해야 합니다.
  data_dir: "/content/drive/MyDrive/Paper/ct_segmentation/output_dataset"
  test_img_dir: "/content/drive/MyDrive/Paper/ct_segmentation/output_dataset/test"
  image_size: 1024 # MedSAM 입력 이미지 크기
  num_classes: 1 # 마스크 클래스 수 (병변 1개)
  normalize_type: "sam" # 이미지 정규화 타입 (dataset.py 참조)
  augment: True # 데이터 증강 사용 여부
  threshold: 0.3 # 임계값 (Dice, IoU 계산 및 마스크 이진화에 사용)

dataloader:
  batch_size: 4
  num_workers: 8 # 데이터 로딩 워커 수 (환경에 따라 조절)

optimizer:
  g_lr: 0.00005 # Generator 학습률 (SAM parts)
  d_lr: 0.000001 # Discriminator 학습률 (이전 시도들을 기반으로 재조정)
  weight_decay: 0.0001
  max_grad_norm: 1.0
  d_update_interval: 5 # Discriminator를 Generator의 2배 느리게 업데이트 (2배 배치마다 1회 업데이트). 
                       # 1로 설정하면 매 배치 업데이트, 2는 2배 느리게, 3은 3배 느리게.
                       # Discriminator가 너무 강하다면 이 값을 2, 3 등으로 늘려보세요.

losses:
  segmentation_weight: 1.0 # DiceFocalLoss의 가중치
  adversarial_weight: 0.1 #  0.005 Generator 손실에서 Adversarial Loss의 가중치
  lambda_gp: 10.0 # WGAN-GP Gradient Penalty 가중치

  # ⭐ 추가: DiceFocalLoss 및 FocalLoss 내부 파라미터
  dice_focal_loss_weights:
    w_dice: 0.5 # Dice Loss 가중치
    w_focal: 0.5 # Focal Loss 가중치
  focal_loss_params:
    alpha: 0.8 # Focal Loss의 alpha (클래스 불균형 조절)
    gamma: 2.0 # Focal Loss의 gamma (쉬운 샘플의 손실 감소)

epochs: 100 # 전체 학습 에폭 수
early_stopping_patience: 15 # Val Dice 개선 없을 시 학습 조기 종료까지 기다릴 에폭 수
log_interval: 10 # 훈련 중 몇 배치마다 로그 출력

seed: 42 # 난수 시드 (재현성 확보)
gpu: 0 # 사용할 GPU 번호 (0부터 시작)

output_dir: outputs # 학습 결과 및 모델 저장 최상위 디렉토리

kfold:
  n_splits: 5 # K-Fold 분할 수
